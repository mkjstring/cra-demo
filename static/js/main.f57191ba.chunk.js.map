{"version":3,"sources":["components/card/component.card.jsx","components/card-list/component.card-list.jsx","components/search-box/component.search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","user","this","filterMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,+BAAML,EAAMI,QAAQE,KAApB,OACA,4BAAKN,EAAMI,QAAQG,YCDdC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHVM,G,aAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAYF,MCgCDG,G,yDApCb,aAAc,IAAD,8BACX,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAYF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO3C,WACE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAiBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,oBAAIA,UAAU,eAAd,8BACA,cAAC,EAAD,CACIW,YAAY,kBACZC,aAAce,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAWoB,W,GAhCXI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f57191ba.chunk.js","sourcesContent":["import React from 'react'\nimport './styles.card.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h1>{ props.monster.name } </h1>\n        <p>{ props.monster.email}</p>\n    </div>\n)\n","import React from 'react';\n\nimport {Card} from '../card/component.card';\n\nimport './styles.card-list.css'\n\nexport const CardList = props => (\n    <div className='card-list'> \n    {props.monsters.map(monster => (\n    <Card key={monster.id} monster={monster} />\n    ))}\n    </div>\n);\n","import { placeholder } from '@babel/types';\nimport React from 'react';\n\nimport './styles.searchbox.css'\n\n\nexport const SearchBox = ({placeholder,handleChange}) => (\n    <input \n    className='search'\n    type='search'\n    placeholder={placeholder}\n    onChange = {handleChange}\n  />\n)","import React, { Component } from 'react';\nimport {CardList} from './components/card-list/component.card-list';\nimport { SearchBox } from './components/search-box/component.search-box.jsx';\n\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    \n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(user => this.setState({monsters: user}));\n  }\n  \n  handleChange = (e) => {\n    this.setState({ searchField:e.target.value })\n  }\n  \n  render(){\n    const { monsters, searchField } = this.state;  \n    const filterMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n    return(\n      <div className=\"App\">\n        <h1 className='monster-font'>Monsters Rolodex</h1>\n        <SearchBox \n            placeholder='search monsters'\n            handleChange={this.handleChange}\n        />\n        <CardList monsters= {filterMonsters}/>\n    </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}